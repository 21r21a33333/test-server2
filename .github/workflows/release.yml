name: Release

on:
  push:
    tags:
      - "v*.*.*" # Triggers on version tags like v1.0.0, v0.1.0, etc.

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            archive_suffix: darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            archive_suffix: darwin-arm64

          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive_suffix: unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            archive_suffix: unknown-linux-gnu
            cross: true
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            archive_suffix: unknown-linux-musl
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            archive_suffix: unknown-linux-musl
            cross: true
          - os: ubuntu-latest
            target: arm-unknown-linux-gnueabihf
            archive_suffix: unknown-linux-gnueabihf
            cross: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux)
        if: matrix.cross == true
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Extract version from tag
        id: get_version
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Build binary
        shell: bash
        run: |
          if [ "${{ matrix.cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Prepare release artifacts
        shell: bash
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          TARGET="${{ matrix.target }}"
          ARCHIVE_SUFFIX="${{ matrix.archive_suffix }}"
          # Use the git repository name as the binary name
          BINARY_NAME="$(basename -s .git $(git config --get remote.origin.url) 2>/dev/null || echo binary-release-server)"

          # Extract architecture from target
          ARCH=$(echo $TARGET | cut -d'-' -f1)

          # Create release directory structure
          RELEASE_DIR="${BINARY_NAME}-${VERSION}-${ARCHIVE_SUFFIX}"
          mkdir -p "${RELEASE_DIR}/bin"
          mkdir -p "${RELEASE_DIR}/config"

          # Copy binary
          cp "target/${TARGET}/release/${BINARY_NAME}" "${RELEASE_DIR}/bin/"

          # Copy config file (it's in config/ directory in your repo)
          cp config/config.json "${RELEASE_DIR}/config/"

          # Copy additional files
          [ -f README.md ] && cp README.md "${RELEASE_DIR}/"
          [ -f LICENSE ] && cp LICENSE "${RELEASE_DIR}/"

          # Create COPYRIGHT file
          cat > "${RELEASE_DIR}/COPYRIGHT" << 'EOF'
          Copyright (c) 2025 Binary Release Server Authors

          Permission is hereby granted, free of charge, to any person obtaining a copy
          of this software and associated documentation files (the "Software"), to deal
          in the Software without restriction, including without limitation the rights
          to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
          copies of the Software, and to permit persons to whom the Software is
          furnished to do so, subject to the following conditions:

          The above copyright notice and this permission notice shall be included in all
          copies or substantial portions of the Software.

          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
          IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
          FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
          AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
          LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
          OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
          SOFTWARE.
          EOF

          # Create tar.gz archive
          tar -czf "${RELEASE_DIR}.tar.gz" "${RELEASE_DIR}"

          # Generate SHA256 checksum
          if command -v sha256sum &> /dev/null; then
            sha256sum "${RELEASE_DIR}.tar.gz" | awk '{print $1}' > "${RELEASE_DIR}.tar.gz.sha256"
          else
            shasum -a 256 "${RELEASE_DIR}.tar.gz" | awk '{print $1}' > "${RELEASE_DIR}.tar.gz.sha256"
          fi

          # Display checksum
          echo "SHA256 checksum:"
          cat "${RELEASE_DIR}.tar.gz.sha256"

          # Store artifact names for upload
          echo "ARCHIVE_NAME=${RELEASE_DIR}.tar.gz" >> $GITHUB_ENV
          echo "CHECKSUM_NAME=${RELEASE_DIR}.tar.gz.sha256" >> $GITHUB_ENV

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ARCHIVE_NAME }}
            ${{ env.CHECKSUM_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release-summary:
    name: Create Release Summary
    needs: build-and-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Set binary name
        run: |
          # Use the git repository name as the binary name
          BINARY_NAME="$(basename -s .git $(git config --get remote.origin.url) 2>/dev/null || echo binary-release-server)"
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV

      - name: Create Release Notes
        uses: softprops/action-gh-release@v1
        with:
          body: |
            ## Binary Release Server v${{ steps.get_version.outputs.VERSION }}

            ### Installation

            Download the appropriate binary for your system from the assets below.

            #### Quick Install (Linux/macOS):
            ```bash
            # Replace {OS} with your system (darwin, unknown-linux-gnu, unknown-linux-musl)
            curl -sL https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/${{ env.BINARY_NAME }}-${{ steps.get_version.outputs.VERSION }}-{OS}.tar.gz | tar xz
            cd ${{ env.BINARY_NAME }}-${{ steps.get_version.outputs.VERSION }}-{OS}
            ./bin/${{ env.BINARY_NAME }}
            ```

            ### Available Builds

            - **macOS**:
              - Intel (x86_64): `${{ env.BINARY_NAME }}-${{ steps.get_version.outputs.VERSION }}-darwin.tar.gz`
              - Apple Silicon (ARM64): `${{ env.BINARY_NAME }}-${{ steps.get_version.outputs.VERSION }}-darwin-arm64.tar.gz`

            - **Linux (GNU)**:
              - x86_64: `${{ env.BINARY_NAME }}-${{ steps.get_version.outputs.VERSION }}-unknown-linux-gnu.tar.gz`
              - ARM64: `${{ env.BINARY_NAME }}-${{ steps.get_version.outputs.VERSION }}-unknown-linux-gnu.tar.gz`
              - ARMv7: `${{ env.BINARY_NAME }}-${{ steps.get_version.outputs.VERSION }}-unknown-linux-gnueabihf.tar.gz`

            - **Linux (MUSL - Static)**:
              - x86_64: `${{ env.BINARY_NAME }}-${{ steps.get_version.outputs.VERSION }}-unknown-linux-musl.tar.gz`
              - ARM64: `${{ env.BINARY_NAME }}-${{ steps.get_version.outputs.VERSION }}-unknown-linux-musl.tar.gz`

            ### Verification

            Each binary includes a `.sha256` file for verification:
            ```bash
            sha256sum -c ${{ env.BINARY_NAME }}-${{ steps.get_version.outputs.VERSION }}-{OS}.tar.gz.sha256
            ```

            ### Configuration

            Edit `config/config.json` to customize the server:
            ```json
            {
              "message": "Your custom message",
              "port": 3000
            }
            ```

            ### What's Changed

            See the [CHANGELOG](./CHANGELOG.md) for details.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
